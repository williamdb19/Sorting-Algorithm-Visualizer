{"version":3,"sources":["SortingAlgorithm/SortingAlgorithmNew.js","SortingAlgorithmVisualizer/AlgorithmVisualizerNew.jsx","App.js","serviceWorker.js","index.js"],"names":["sortingAnimations","array","type","sortAnimations","length","tmpArray","slice","mergeSort","min","max","med","Math","floor","i","j","k","push","merge","quickSort","low","high","partIndx","pivot","temp","partition","n","heapify","tmp","heapSort","bubbleSort","l","r","SortingAlgorithmVisualizer","props","state","numTotalBars","sortAnimationSpeed","this","randomArray","arrayBarClass","document","getElementsByClassName","random","setTimeout","style","backgroundColor","setState","sortedArray","sort","a","b","choice","console","log","sortingArray","arrayBarOneIndx","arrayBarTwoIndx","arrayBarOneStyle","arrayBarTwoStyle","barCurrentIndx","barCurrentValue","height","barOneCurrentIndx","barOneCurrentValue","barTwoCurrentIndx","barTwoCurrentValue","barOneCurrentStyle","barTwoCurrentStyle","className","map","value","indx","key","id","onClick","mergeAnimationDecoder","quickAnimationDecoder","heapAnimationDecoder","bubbleAnimationDecoder","testSortingAlgorithm","for","step","onChange","getElementById","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e86f0b5.chunk.js","sourcesContent":["export function sortingAnimations(array, type) \r\n{\r\n    const sortAnimations = [];    //animation array is sent to visualizer to determine what to change to the webpage to show sorting\r\n    if (array.length <= 1)\r\n    {\r\n        return array;\r\n    }\r\n    const tmpArray = array.slice();\r\n    //const n = array.length;\r\n    //const sortedArray = array.slice().sort((a, b) => a - b);\r\n    switch (type)\r\n    {\r\n        case 0:     //merge sort\r\n            //console.log(sortedArray);\r\n            mergeSort(array, 0, array.length - 1, tmpArray, sortAnimations);\r\n            //console.log(array);\r\n            //console.log(sortAnimations);\r\n            return sortAnimations;\r\n        case 1:     //quick sort\r\n            quickSort(array, 0, array.length - 1, sortAnimations);\r\n            return sortAnimations;\r\n        case 2:     //heap sort\r\n            //console.log(sortedArray);\r\n            //console.log(array);\r\n            heapSort(array, sortAnimations);\r\n            //console.log(sortAnimations);\r\n            //console.log(array);\r\n            return sortAnimations;\r\n        case 3:     //bubble sort\r\n            bubbleSort(array, sortAnimations);\r\n            return sortAnimations;\r\n        default:\r\n            break;\r\n    }\r\n    return;\r\n}\r\nfunction mergeSort(array, min, max, tmpArray, sortAnimations) //uses recursion\r\n{   \r\n    if(min === max) return;\r\n    const med = Math.floor((min + max) / 2); \r\n    mergeSort(tmpArray, min, med, array, sortAnimations);     //divide first half in 2\r\n    mergeSort(tmpArray, med + 1, max, array, sortAnimations);     //divide second half in 2\r\n    merge(array, min, med, max, tmpArray, sortAnimations);    //at the end of all recursive mergeSort division, merge both halves back together\r\n    //console.log(mergeSortAnimations);\r\n}\r\nfunction merge(array, min, med, max, tmpArray, sortAnimations)\r\n{\r\n    //used https://www.geeksforgeeks.org/merge-sort/ for help to setup merge sort\r\n    let i = min, j = min, k = med + 1;\r\n    while(j <= med && k <= max)\r\n    {\r\n        sortAnimations.push([j, k]);\r\n        if(tmpArray[j] <= tmpArray[k])\r\n        {\r\n            sortAnimations.push([i, tmpArray[j]]);\r\n            array[i++] = tmpArray[j++];\r\n        }\r\n        else\r\n        {\r\n            sortAnimations.push([i, tmpArray[k]]);\r\n            array[i++] = tmpArray[k++];\r\n        }\r\n    }\r\n    while(j <= med)\r\n    {\r\n        sortAnimations.push([j, j]);\r\n        sortAnimations.push([i, tmpArray[j]]);\r\n        array[i++] = tmpArray[j++];\r\n    }\r\n    while(k <= max)\r\n    {\r\n        sortAnimations.push([k, k]);\r\n        sortAnimations.push([i, tmpArray[k]]);\r\n        array[i++] = tmpArray[k++];\r\n    }\r\n}\r\n/*function bubbleSort(array, n, sortAnimations)\r\n{\r\n    if(n === 1) return;\r\n    for(let i = 0; i < n - 1; i++)\r\n    {\r\n        if(array[i] > array[i + 1])\r\n        {\r\n            sortAnimations.push([i, i + 1]);\r\n            sortAnimations.push([i, array[i], i + 1, array[i + 1]]);\r\n            let a = array[i];\r\n            let b = array[i + 1];\r\n            let tmp = a;\r\n            a = b;\r\n            b =  tmp;\r\n            //[array[i], array[i + 1]] = [array[i + 1], array[i]];\r\n        }\r\n        bubbleSort(array, n - 1, sortAnimations);\r\n    }\r\n}*/\r\nfunction bubbleSort(array, sortAnimations)\r\n{\r\n    for(let i = 0; i < array.length; i++)\r\n    {\r\n        for(let j = 0; j < array.length - i - 1; j++)\r\n        {\r\n            if(array[j] > array[j + 1])\r\n            {\r\n                let tmp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = tmp;\r\n                sortAnimations.push([j, j + 1]);\r\n                sortAnimations.push([j, array[j], j + 1, array[j + 1]]);\r\n            }\r\n            else\r\n            {\r\n                sortAnimations.push([j,j])\r\n                sortAnimations.push([j, array[j], j, array[j]])\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction heapSort(array, sortAnimations)\r\n{\r\n    // used https://www.geeksforgeeks.org/heap-sort/ for help setting up heap sort\r\n    let n = array.length;\r\n    for(let i = n / 2 - 1; i >= 0; i--)\r\n    {\r\n        heapify(array, n, i, sortAnimations);\r\n    }\r\n    for(let i = n - 1; i > 0; i--)\r\n    {\r\n        sortAnimations.push([0, array[0], i, array[i]]);\r\n        let tmp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = tmp;\r\n        heapify(array, i, 0, sortAnimations);\r\n    }\r\n\r\n}\r\nfunction heapify(array, n, i, sortAnimations)\r\n{\r\n    let max = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2 * i + 2;\r\n\r\n    if(array[l] > array[max] && l < n)\r\n    {\r\n        max = l;\r\n    }\r\n    if(array[r] > array[max] && r < n)\r\n    {\r\n        max = r;\r\n    }\r\n    if(max !== i)\r\n    {\r\n        sortAnimations.push([i, array[i], max, array[max]]);\r\n        let tmp = array[i];\r\n        array[i] = array[max];\r\n        array[max] = tmp;\r\n        heapify(array, n, max, sortAnimations);\r\n    }\r\n}\r\nfunction quickSort(array, low, high, sortAnimations)\r\n{\r\n    // used https://www.geeksforgeeks.org/quick-sort/ for setting up quick sort\r\n    if (low < high) \r\n    { \r\n        let partIndx = partition(array, low, high, sortAnimations);\r\n        quickSort(array, low, partIndx - 1, sortAnimations); \r\n        quickSort(array, partIndx + 1, high, sortAnimations); \r\n    }     \r\n}\r\nfunction partition(array, low, high, sortAnimations)\r\n{\r\n    let pivot = array[high];  \r\n    let i = low - 1; \r\n    for (let j = low; j < high; j++) \r\n    { \r\n        if (array[j] < pivot) \r\n        { \r\n            i++; \r\n            sortAnimations.push([i, array[i], j, array[j]]);\r\n            let temp = array[i]; \r\n            array[i] = array[j]; \r\n            array[j] = temp; \r\n        } \r\n    } \r\n    sortAnimations.push([i + 1, array[i + 1], high, array[high]]);\r\n    let temp = array[i + 1]; \r\n    array[i + 1] = array[high]; \r\n    array[high] = temp; \r\n\r\n    return i+1;\r\n}\r\n //used https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial for help to create basis of sorting and visualizing\r\n\r\n\r\n","import React from 'react';\r\nimport './AlgorithmVisualizer.css';\r\nimport {sortingAnimations} from '../SortingAlgorithm/SortingAlgorithmNew.js';\r\n\r\nconst barColorOne = 'blue';\r\nconst barColorTwo = 'orange';\r\nconst barColorSucess = 'green';\r\n\r\nconst minArrayValue = 1;\r\nconst maxArrayValue = 500;\r\n\r\n\r\nexport default class SortingAlgorithmVisualizer extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            array: [], \r\n            numTotalBars: 100,\r\n            sortAnimationSpeed: 1\r\n        };\r\n    }\r\n    componentDidMount()\r\n    {\r\n        this.randomArray();\r\n    }\r\n    randomArray()\r\n    {\r\n        const array = [];\r\n        const numTotalBars = this.state.numTotalBars;\r\n        const arrayBarClass = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < numTotalBars; i++)\r\n        {\r\n            array.push(randomIntFromInterval(minArrayValue, maxArrayValue));\r\n        }\r\n        setTimeout(() => {\r\n            for(let i = 0; i < array.length; i++)\r\n            {\r\n                arrayBarClass[i].style.backgroundColor = barColorOne;\r\n            }\r\n        }, 1);\r\n        this.setState({array: array});\r\n    } \r\n    testSortingAlgorithm()  //used to test if current sorting algorithm works\r\n    {\r\n        const array = this.state.array;\r\n        const arrayBarClass = document.getElementsByClassName('array-bar');\r\n        const sortedArray = array.slice().sort((a, b) => a - b);\r\n        this.setState({array: sortedArray});\r\n        setTimeout(() => {\r\n            for(let i = 0; i < array.length; i++)\r\n            {\r\n                arrayBarClass[i].style.backgroundColor = barColorSucess;\r\n            }\r\n        }, 1);\r\n    }\r\n    mergeAnimationDecoder(choice)\r\n    {\r\n        console.log(this.state.array);\r\n        const sortingArray = sortingAnimations(this.state.array.slice(), choice);\r\n        console.log(this.state.array);\r\n        const sortAnimationSpeed = this.state.sortAnimationSpeed;\r\n        for(let i = 0; i < sortingArray.length; i++)\r\n        {\r\n            const arrayBarClass = document.getElementsByClassName('array-bar');\r\n            //console.log(arrayBarClass);\r\n            const ischangeColor = i % 2 !== 1;\r\n            if(ischangeColor)\r\n            {\r\n                const arrayBarOneIndx = sortingArray[i][0];\r\n                const arrayBarTwoIndx = sortingArray[i][1];\r\n                //console.log(arrayBarOneIndx);\r\n                //console.log(arrayBarTwoIndx);\r\n                const arrayBarOneStyle = arrayBarClass[arrayBarOneIndx].style;\r\n                const arrayBarTwoStyle = arrayBarClass[arrayBarTwoIndx].style;\r\n                setTimeout(() => {\r\n                    arrayBarOneStyle.backgroundColor = barColorOne;\r\n                    arrayBarTwoStyle.backgroundColor = barColorTwo;\r\n                }, i * sortAnimationSpeed);\r\n                setTimeout(() => {\r\n                    arrayBarOneStyle.backgroundColor = barColorTwo;\r\n                    arrayBarTwoStyle.backgroundColor = barColorOne;\r\n                }, i * sortAnimationSpeed);\r\n            } \r\n            else\r\n            {\r\n                setTimeout(() => {\r\n                    const barCurrentIndx = sortingArray[i][0];\r\n                    //console.log(barCurrentIndx);\r\n                    const barCurrentValue = sortingArray[i][1];\r\n                    //console.log(barCurrentValue);\r\n                    const barCurrentStyle = arrayBarClass[barCurrentIndx].style;\r\n                    //console.log(barCurrentStyle);\r\n                    barCurrentStyle.height =`${barCurrentValue}px`;\r\n                }, i * sortAnimationSpeed);\r\n            }\r\n        }\r\n    }\r\n    bubbleAnimationDecoder(choice)\r\n    {\r\n        const sortingArray = sortingAnimations(this.state.array.slice(), choice);\r\n        //console.log(sortingAnimationArray);\r\n        const sortAnimationSpeed = this.state.sortAnimationSpeed;\r\n        for(let i = 0; i < sortingArray.length; i++)\r\n        {\r\n            const arrayBarClass = document.getElementsByClassName('array-bar');\r\n            //console.log(arrayBarClass);\r\n            const ischangeColor = i % 2 !== 1;\r\n            if(ischangeColor)\r\n            {\r\n                const arrayBarOneIndx = sortingArray[i][0];\r\n                const arrayBarTwoIndx = sortingArray[i][1];\r\n                //console.log(arrayBarOneIndx);\r\n                //console.log(arrayBarTwoIndx);\r\n                const arrayBarOneStyle = arrayBarClass[arrayBarOneIndx].style;\r\n                const arrayBarTwoStyle = arrayBarClass[arrayBarTwoIndx].style;\r\n                setTimeout(() => {\r\n                    arrayBarOneStyle.backgroundColor = barColorOne;\r\n                    arrayBarTwoStyle.backgroundColor = barColorTwo;\r\n                }, i * sortAnimationSpeed);\r\n            } \r\n            else\r\n            {\r\n                setTimeout(() => {\r\n                    const barOneCurrentIndx = sortingArray[i][0];\r\n                    //console.log(barCurrentIndx);\r\n                    const barOneCurrentValue = sortingArray[i][1];\r\n                    //console.log(barCurrentValue);\r\n                    const barTwoCurrentIndx = sortingArray[i][2];\r\n                    //console.log(barCurrentIndx);\r\n                    const barTwoCurrentValue = sortingArray[i][3];\r\n                    //console.log(barCurrentValue);\r\n                    const barOneCurrentStyle = arrayBarClass[barOneCurrentIndx].style;\r\n                    //console.log(barCurrentStyle);\r\n                    barOneCurrentStyle.height =`${barOneCurrentValue}px`;\r\n                    const barTwoCurrentStyle = arrayBarClass[barTwoCurrentIndx].style;\r\n                    //console.log(barCurrentStyle);\r\n                    barTwoCurrentStyle.height =`${barTwoCurrentValue}px`;\r\n                }, i * sortAnimationSpeed);\r\n            }\r\n        }\r\n    }\r\n    heapAnimationDecoder(choice)\r\n    {\r\n        const sortingArray = sortingAnimations(this.state.array.slice(), choice);\r\n        //console.log(sortingAnimationArray);\r\n        const sortAnimationSpeed = this.state.sortAnimationSpeed;\r\n        for(let i = 0; i < sortingArray.length; i++)\r\n        {\r\n            const arrayBarClass = document.getElementsByClassName('array-bar');\r\n            //console.log(arrayBarClass);\r\n            setTimeout(() => {\r\n                const barOneCurrentIndx = sortingArray[i][0];\r\n                //console.log(barCurrentIndx);\r\n                const barOneCurrentValue = sortingArray[i][1];\r\n                //console.log(barCurrentValue);\r\n                const barTwoCurrentIndx = sortingArray[i][2];\r\n                //console.log(barTwoCurrentIndx);\r\n                const barTwoCurrentValue = sortingArray[i][3];\r\n                //console.log(barCurrentValue);\r\n                const barOneCurrentStyle = arrayBarClass[barOneCurrentIndx].style;\r\n                //console.log(barOneCurrentStyle);\r\n                barOneCurrentStyle.height =`${barTwoCurrentValue}px`;\r\n                barOneCurrentStyle.backgroundColor = barColorOne;\r\n                const barTwoCurrentStyle = arrayBarClass[barTwoCurrentIndx].style;\r\n                //console.log(barCurrentStyle);\r\n                barTwoCurrentStyle.height =`${barOneCurrentValue}px`;\r\n                barTwoCurrentStyle.backgroundColor = barColorTwo;\r\n            }, i * sortAnimationSpeed);\r\n        }\r\n    }\r\n    quickAnimationDecoder(choice)\r\n    {\r\n        const sortingArray = sortingAnimations(this.state.array.slice(), choice);\r\n        //console.log(sortingAnimationArray);\r\n        const sortAnimationSpeed = this.state.sortAnimationSpeed;\r\n        //document.getElementById(\"randArrayButton\").disabled = true;\r\n        for(let i = 0; i < sortingArray.length; i++)\r\n        {\r\n            const arrayBarClass = document.getElementsByClassName('array-bar');\r\n            //console.log(arrayBarClass);\r\n            setTimeout(() => {\r\n                const barOneCurrentIndx = sortingArray[i][0];\r\n                //console.log(barCurrentIndx);\r\n                const barOneCurrentValue = sortingArray[i][1];\r\n                //console.log(barCurrentValue);\r\n                const barTwoCurrentIndx = sortingArray[i][2];\r\n                //console.log(barTwoCurrentIndx);\r\n                const barTwoCurrentValue = sortingArray[i][3];\r\n                //console.log(barCurrentValue);\r\n                const barOneCurrentStyle = arrayBarClass[barOneCurrentIndx].style;\r\n                //console.log(barOneCurrentStyle);\r\n                barOneCurrentStyle.height =`${barTwoCurrentValue}px`;\r\n                barOneCurrentStyle.backgroundColor = barColorOne;\r\n                const barTwoCurrentStyle = arrayBarClass[barTwoCurrentIndx].style;\r\n                //console.log(barCurrentStyle);\r\n                barTwoCurrentStyle.height =`${barOneCurrentValue}px`;\r\n                barTwoCurrentStyle.backgroundColor = barColorTwo;\r\n            }, i * sortAnimationSpeed);\r\n        }\r\n        //document.getElementById(\"randArrayButton\").disabled = false;\r\n    }\r\n    //sortSlider.addEventListener('onChange', animationSpeedSlider(document.getElementById(\"sortAnimationSlider\")));\r\n    /*animationSpeedSlider(i)\r\n    {\r\n        let k = .1;\r\n        Math.round(i);\r\n        for(let j = 1; j < i; j++)\r\n        {\r\n            k = k * 10;\r\n        }\r\n        this.setState({sortAnimationSpeed: k});\r\n        return k;\r\n    }*/\r\n    render()\r\n    {\r\n\r\n        const array = this.state.array.slice();\r\n        return(\r\n            <div className='array-container'>\r\n                <div>\r\n                    <h1>Sorting Algorithm Visualizer</h1>\r\n                    <h1>Name: William Del Barrio\r\n                    </h1>\r\n                    <p1>\r\n                        This web application was made using mostly React(React Native) as well as React JS, Javascript, HTML, and CSS.\r\n                        The component below represents a random array in which each bar has a value and an index. The value of each bar\r\n                        is represented by the height of the bar (bars that are taller have larger values compared to shorter bars) and the index\r\n                        (position in the array) is represented by location. A bar with an index of 0 would be found at the left most region of the \r\n                        array/component and the index will increase as you move to the right.\r\n                    </p1>\r\n                    \r\n                </div>\r\n                {array.map((value, indx) => \r\n                (<div className = 'array-bar'\r\n                    key = {indx}\r\n                    style = {{backgroundColor:barColorOne, height:`${value}px`}}\r\n                > \r\n                </div>)\r\n                )}\r\n                <div>\r\n                    <button id=\"randArrayButton\" onClick={() => {this.randomArray()}}>Generate New Array</button>\r\n                    <button onClick={() => {this.mergeAnimationDecoder(0)}}>Merge Sort</button>\r\n                    <button onClick={() => {this.quickAnimationDecoder(1)}}>Quick Sort</button>\r\n                    <button onClick={() => {this.heapAnimationDecoder(2)}}>Heap Sort</button>\r\n                    <button onClick={() => {this.bubbleAnimationDecoder(3)}}>Bubble Sort</button>\r\n                    <button onClick={() => {this.testSortingAlgorithm()}}>Check Algorithm</button>\r\n                </div>\r\n                <div>\r\n                    <label for=\"barNumInput\">Size of Array:</label>\r\n                    <input type=\"number\" id=\"barNumInput\" min={1} max={300} step={1} value={this.state.numTotalBars} onChange={() => {const numTotalBars = document.getElementById(\"barNumInput\").value; this.randomArray(); this.setState({numTotalBars: numTotalBars})}}/>\r\n                </div>\r\n                <div>\r\n                    <label for=\"sortAnimationSlider\">Speed of Sorting (number of milliseconds between animations):</label>\r\n                    <input type=\"number\" className=\"sortSlider\" id=\"sortAnimationSlider\" min={1} max={1000} step={100} value={this.state.sortAnimationSpeed} onChange={() => {const sortAnimationSpeed = document.getElementById(\"sortAnimationSlider\").value; this.setState({sortAnimationSpeed: sortAnimationSpeed})}}/>\r\n                </div>\r\n                <br/>\r\n                <p1>\r\n                    To sort the area, click one of the sorting style buttons (\"Merge Sort\", \"Quick Sort\", \"Heap Sort\", or \"Bubble Sort\") and watch as the \r\n                    array is sorted by value in increasing order (Do not press any other buttons while the array is currently sorting). After waiting for the array to sort, you can click \"Check Algorithm\" to see if the\r\n                    array is sorted. If sorted, the array bars will turn green. While the array is being sorted/animations are occuring, do not press any other buttons.\r\n                    If you want to increase or decrease the size of the array, change the value in the \"Size of Array\" box and press \"Generate New Array\". To change the speed of \r\n                    the array, change the value in the \"Speed of Sorting\" box.\r\n                </p1>\r\n                <br/>\r\n                <br/>\r\n                <p1>\r\n                    **Note: Due to the current program and the way the application was built, if you press any sorting button while the array is still sorting, the sort animation will\r\n                    run again meaning the same steps will be taken as the first animation although the end result is the same. I believe this issue has mostly to do with how react's \r\n                    framework handles rendering the page. I have tried to implement logic to the sorting buttons to be disabled while rendering and have also created a sorting state \r\n                    to give feedback on if the application is currently sorting or not but I was not able to find a method to disable the button while the animations are occuring and\r\n                    then enable them when the animation ends. I am currently working on other projects but will come back to fix this issue when I have more time.**\r\n                </p1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max)\r\n{\r\n    return Math.floor((Math.random() * max) + min);\r\n}\r\n //used https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial for help to create basis of sorting and visualizing\r\n","import React from 'react';\nimport SortingAlgorithmVisualizer from './SortingAlgorithmVisualizer/AlgorithmVisualizerNew.jsx';\nimport './App.css';\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <SortingAlgorithmVisualizer></SortingAlgorithmVisualizer>\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}